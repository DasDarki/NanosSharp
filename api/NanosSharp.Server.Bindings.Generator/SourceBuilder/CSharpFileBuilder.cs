using System.Text;

namespace NanosSharp.Server.Bindings.Generator.SourceBuilder;

internal class CSharpFileBuilder : ISourceBuilder
{
    private bool _usings;
    private readonly List<ISourceBuilder> _builders = new();

    internal CSharpFileBuilder WithUsings()
    {
        _usings = true;
        return this;
    }

    internal void AddEnum(string name, Action<EnumBuilder> provider)
    {
        var enumBuilder = new EnumBuilder(name);
        provider(enumBuilder);
        _builders.Add(enumBuilder);
    }

    internal void AddClass(bool isStatic, string name, string[] inheritances, Action<ClassBuilder> provider)
    {
        var classBuilder = new ClassBuilder(isStatic, name, inheritances);
        provider(classBuilder);
        _builders.Add(classBuilder);
    }

    public string Generate(int indent = 0)
    {
        var sb = new StringBuilder();
        sb.AppendLineWithIndent("// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3", indent).AppendLine();

        if (_usings)
        {
            sb.AppendLineWithIndent("using NanosSharp.API;", indent).AppendLine();
        }

        sb.AppendLineWithIndent("namespace NanosSharp.Server.Bindings;", indent).AppendLine();
            
        foreach (var builder in _builders)
        {
            sb.AppendLineWithIndent(builder.Generate(indent), indent);
        }

        return sb.ToString();
    }
}