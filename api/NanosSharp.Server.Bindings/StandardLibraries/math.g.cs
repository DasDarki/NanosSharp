// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class math
{
    public static double ceil(ILuaVM vm, double number)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "ceil");
        pc++;
        vm.PushNumber(number);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double tan(ILuaVM vm, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "tan");
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double min(ILuaVM vm, LuaRef numbers)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "min");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, numbers);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double fmod(ILuaVM vm, double @base, double modulator)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "fmod");
        pc++;
        vm.PushNumber(@base);
        pc++;
        vm.PushNumber(modulator);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double exp(ILuaVM vm, double exponent)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "exp");
        pc++;
        vm.PushNumber(exponent);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double random(ILuaVM vm, double m, double n)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "random");
        pc++;
        vm.PushNumber(m);
        pc++;
        vm.PushNumber(n);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double rad(ILuaVM vm, double degrees)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "rad");
        pc++;
        vm.PushNumber(degrees);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double sin(ILuaVM vm, double number)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "sin");
        pc++;
        vm.PushNumber(number);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double cos(ILuaVM vm, double number)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "cos");
        pc++;
        vm.PushNumber(number);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double asin(ILuaVM vm, double normal)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "asin");
        pc++;
        vm.PushNumber(normal);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void randomseed(ILuaVM vm, double seed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "randomseed");
        pc++;
        vm.PushNumber(seed);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static double floor(ILuaVM vm, double number)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "floor");
        pc++;
        vm.PushNumber(number);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double max(ILuaVM vm, LuaRef numbers)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "max");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, numbers);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double atan(ILuaVM vm, double normal)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "atan");
        pc++;
        vm.PushNumber(normal);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double acos(ILuaVM vm, double cos)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "acos");
        pc++;
        vm.PushNumber(cos);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double abs(ILuaVM vm, double x)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "abs");
        pc++;
        vm.PushNumber(x);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double log(ILuaVM vm, double x, double @base)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "log");
        pc++;
        vm.PushNumber(x);
        pc++;
        vm.PushNumber(@base);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void modf(ILuaVM vm, double @base, out double r0, out double r1)
    {
        r0 = default;
        r1 = default;
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "modf");
        pc++;
        vm.PushNumber(@base);
        vm.MCall(pc, 2);
        r1 = vm.ToNumber(-1);
        vm.Pop();
        r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
    }

    public static double deg(ILuaVM vm, double radians)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "deg");
        pc++;
        vm.PushNumber(radians);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double sqrt(ILuaVM vm, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "math");
        vm.GetField(-1, "sqrt");
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

