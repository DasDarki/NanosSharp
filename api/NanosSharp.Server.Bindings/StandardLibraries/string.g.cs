// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class @string
{
    public static bool StartsWith(ILuaVM vm, LuaRef selfRef, string other_string)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "StartsWith");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(other_string);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool EndsWith(ILuaVM vm, LuaRef selfRef, string other_string)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "EndsWith");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(other_string);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string Trim(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Trim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string FormatArgs(ILuaVM vm, LuaRef selfRef, LuaRef args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "FormatArgs");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, args);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef @byte(ILuaVM vm, LuaRef selfRef, LuaRef? start_pos = null, LuaRef? end_pos = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "byte");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (start_pos != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, start_pos.Value);
        }
        if (end_pos != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, end_pos.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static string @char(ILuaVM vm, LuaRef selfRef, LuaRef values)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "char");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, values);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void find(ILuaVM vm, LuaRef selfRef, string haystack, string needle, double startPos, bool noPatterns, out double r0, out double r1, out string r2)
    {
        r0 = default;
        r1 = default;
        r2 = default;
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "find");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(haystack);
        pc++;
        vm.PushString(needle);
        pc++;
        vm.PushNumber(startPos);
        pc++;
        vm.PushBoolean(noPatterns);
        vm.MCall(pc, 3);
        r2 = vm.ToString(-1);
        vm.Pop();
        r1 = vm.ToNumber(-1);
        vm.Pop();
        r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
    }

    public static string rep(ILuaVM vm, LuaRef selfRef, string str, double repetitions, string separator)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "rep");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(str);
        pc++;
        vm.PushNumber(repetitions);
        pc++;
        vm.PushString(separator);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string lower(ILuaVM vm, LuaRef selfRef, string str)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "lower");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(str);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string upper(ILuaVM vm, LuaRef selfRef, string str)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "upper");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(str);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string dump(ILuaVM vm, LuaRef selfRef, ILuaVM.CFunction func, bool stripDebugInfo)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "dump");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushManagedFunction(func);
        pc++;
        vm.PushBoolean(stripDebugInfo);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double match(ILuaVM vm, LuaRef selfRef, string @string, string pattern, double startPosition)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "match");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(@string);
        pc++;
        vm.PushString(pattern);
        pc++;
        vm.PushNumber(startPosition);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string reverse(ILuaVM vm, LuaRef selfRef, string str)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "reverse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(str);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string sub(ILuaVM vm, LuaRef selfRef, string @string, double StartPos, double EndPos)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "sub");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(@string);
        pc++;
        vm.PushNumber(StartPos);
        pc++;
        vm.PushNumber(EndPos);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static ILuaVM.CFunction gmatch(ILuaVM vm, LuaRef selfRef, string data, string pattern)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "gmatch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(data);
        pc++;
        vm.PushString(pattern);
        vm.MCall(pc, 1);
        var r0 = vm.ToCFunction(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double len(ILuaVM vm, LuaRef selfRef, string str)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "len");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(str);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void gsub(ILuaVM vm, LuaRef selfRef, string @string, string pattern, string replacement, double maxReplaces, out string r0, out double r1)
    {
        r0 = default;
        r1 = default;
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "gsub");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(@string);
        pc++;
        vm.PushString(pattern);
        pc++;
        vm.PushString(replacement);
        pc++;
        vm.PushNumber(maxReplaces);
        vm.MCall(pc, 2);
        r1 = vm.ToNumber(-1);
        vm.Pop();
        r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
    }

    public static string format(ILuaVM vm, LuaRef selfRef, string format, double formatParameters)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "string");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "format");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(format);
        pc++;
        vm.PushNumber(formatParameters);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

