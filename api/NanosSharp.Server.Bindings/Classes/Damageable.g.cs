// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BDamageable
{
    public static long ApplyDamage(ILuaVM vm, LuaRef selfRef, long damage, string? bone_name = null, DamageType? damage_type = null, LuaRef? from_direction = null, LuaRef? instigator = null, object? causer = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ApplyDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, damage);
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        if (damage_type != null)
        {
             pc++;
             vm.PushEnum(damage_type.Value);
        }
        if (from_direction != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, from_direction.Value);
        }
        if (instigator != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, instigator.Value);
        }
        if (causer != null)
        {
             pc++;
             vm.PushObject(causer);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetHealth(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetMaxHealth(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMaxHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void Respawn(ILuaVM vm, LuaRef selfRef, LuaRef? location = null, LuaRef? rotation = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Respawn");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, location.Value);
        }
        if (rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, rotation.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHealth(ILuaVM vm, LuaRef selfRef, long new_health)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, new_health);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMaxHealth(ILuaVM vm, LuaRef selfRef, long max_health)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Damageable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMaxHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, max_health);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

