// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BLight : BEntity
{
    public static void SetColor(ILuaVM vm, LuaRef selfRef, LuaRef color)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, color);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTextureLightProfile(ILuaVM vm, LuaRef selfRef, LightProfile light_profile)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTextureLightProfile");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(light_profile);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCastShadows(ILuaVM vm, LuaRef selfRef, bool is_shadows_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCastShadows");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_shadows_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetIntensity(ILuaVM vm, LuaRef selfRef, LuaRef intensity)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetIntensity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, intensity);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAttenuationRadius(ILuaVM vm, LuaRef selfRef, LuaRef attenuation_radius)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAttenuationRadius");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, attenuation_radius);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool GetCastShadows(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCastShadows");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetIntensity(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetIntensity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetAttenuationRadius(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAttenuationRadius");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetColor(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Light");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

