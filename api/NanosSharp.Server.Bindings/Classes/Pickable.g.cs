// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Pickable
{
    public static void AddSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string skeletal_mesh_path, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(skeletal_mesh_path);
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AddStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string static_mesh_path, string? socket = null, LuaRef? relative_location = null, LuaRef? relative_rotation = null, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(static_mesh_path);
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetAllStaticMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string[] GetAllSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static void RemoveSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetStaticMeshAttachedTransform(ILuaVM vm, LuaRef selfRef, string id, LuaRef relative_location, LuaRef relative_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetStaticMeshAttachedTransform");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllStaticMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllStaticMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllSkeletalMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllSkeletalMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PullUse(ILuaVM vm, LuaRef selfRef, LuaRef? release_use_after = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PullUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (release_use_after != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, release_use_after.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ReleaseUse(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ReleaseUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAttachmentSettings(ILuaVM vm, LuaRef selfRef, LuaRef relative_location, LuaRef? relative_rotation = null, string? socket = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAttachmentSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_location);
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCrosshairMaterial(ILuaVM vm, LuaRef selfRef, string material_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCrosshairMaterial");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(material_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPickable(ILuaVM vm, LuaRef selfRef, bool is_pickable)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPickable");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_pickable);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetMesh(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetHandler(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHandler");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static HandlingMode GetHandlingMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pickable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHandlingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<HandlingMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

