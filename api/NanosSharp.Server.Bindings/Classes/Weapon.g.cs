// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BWeapon : BEntity
{
    public static void Reload(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Reload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAmmoBag(ILuaVM vm, LuaRef selfRef, long new_ammo_bag)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAmmoBag");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, new_ammo_bag);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAmmoClip(ILuaVM vm, LuaRef selfRef, long new_ammo_clip)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAmmoClip");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, new_ammo_clip);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAmmoSettings(ILuaVM vm, LuaRef selfRef, long ammo_clip, long ammo_bag, long? ammo_to_reload = null, long? clip_capacity = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAmmoSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, ammo_clip);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, ammo_bag);
        if (ammo_to_reload != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, ammo_to_reload.Value);
        }
        if (clip_capacity != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, clip_capacity.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationFire(ILuaVM vm, LuaRef selfRef, string animation_fire_path, LuaRef? play_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_fire_path);
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationCharacterFire(ILuaVM vm, LuaRef selfRef, string animation_character_fire_path, LuaRef? play_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationCharacterFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_character_fire_path);
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationReload(ILuaVM vm, LuaRef selfRef, string reload_animation_path, LuaRef? play_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationReload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(reload_animation_path);
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetAnimationReload(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAnimationReload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void SetAutoReload(ILuaVM vm, LuaRef selfRef, bool auto_reload)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAutoReload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(auto_reload);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetBulletColor(ILuaVM vm, LuaRef selfRef, LuaRef bullet_color)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetBulletColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, bullet_color);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetBulletSettings(ILuaVM vm, LuaRef selfRef, long bullet_count, long bullet_max_distance, long bullet_velocity, LuaRef bullet_color)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetBulletSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, bullet_count);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, bullet_max_distance);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, bullet_velocity);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, bullet_color);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCadence(ILuaVM vm, LuaRef selfRef, LuaRef cadence)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCadence");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, cadence);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetClipCapacity(ILuaVM vm, LuaRef selfRef, long clip)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetClipCapacity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, clip);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDamage(ILuaVM vm, LuaRef selfRef, long damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHandlingMode(ILuaVM vm, LuaRef selfRef, HandlingMode handling_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHandlingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(handling_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetLeftHandTransform(ILuaVM vm, LuaRef selfRef, LuaRef left_hand_location, LuaRef left_hand_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetLeftHandTransform");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, left_hand_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, left_hand_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMagazineMesh(ILuaVM vm, LuaRef selfRef, string magazine_mesh, string? magazine_mesh_hide_bone = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMagazineMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(magazine_mesh);
        if (magazine_mesh_hide_bone != null)
        {
             pc++;
             vm.PushString(magazine_mesh_hide_bone);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PlayAnimation(ILuaVM vm, LuaRef selfRef, string animation_path, string? slot_name = null, bool? loop_indefinitely = null, LuaRef? blend_in_time = null, LuaRef? blend_out_time = null, LuaRef? play_rate = null, bool? stop_all_montages = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PlayAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_path);
        if (slot_name != null)
        {
             pc++;
             vm.PushString(slot_name);
        }
        if (loop_indefinitely != null)
        {
             pc++;
             vm.PushBoolean(loop_indefinitely.Value);
        }
        if (blend_in_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_in_time.Value);
        }
        if (blend_out_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_out_time.Value);
        }
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        if (stop_all_montages != null)
        {
             pc++;
             vm.PushBoolean(stop_all_montages.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetParticlesBulletTrail(ILuaVM vm, LuaRef selfRef, string particle_bullet_trail_asset_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetParticlesBulletTrail");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(particle_bullet_trail_asset_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetParticlesBarrel(ILuaVM vm, LuaRef selfRef, string particle_asset_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetParticlesBarrel");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(particle_asset_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetParticlesShells(ILuaVM vm, LuaRef selfRef, string particle_shells_asset_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetParticlesShells");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(particle_shells_asset_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRightHandOffset(ILuaVM vm, LuaRef selfRef, LuaRef right_hand_offset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRightHandOffset");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, right_hand_offset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSightFOVMultiplier(ILuaVM vm, LuaRef selfRef, LuaRef sight_fov_multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSightFOVMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, sight_fov_multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSightTransform(ILuaVM vm, LuaRef selfRef, LuaRef sight_location, LuaRef sight_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSightTransform");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, sight_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, sight_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundDry(ILuaVM vm, LuaRef selfRef, string sound_dry_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundDry");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_dry_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundLoad(ILuaVM vm, LuaRef selfRef, string sound_load_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundLoad");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_load_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundUnload(ILuaVM vm, LuaRef selfRef, string sound_unload_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundUnload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_unload_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundZooming(ILuaVM vm, LuaRef selfRef, string sound_zooming_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundZooming");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_zooming_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundFire(ILuaVM vm, LuaRef selfRef, string sound_fire_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_fire_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundAim(ILuaVM vm, LuaRef selfRef, string sound_aim_asset_path, LuaRef? volume = null, LuaRef? pitch = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_aim_asset_path);
        if (volume != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, volume.Value);
        }
        if (pitch != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, pitch.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundFireLastBullets(ILuaVM vm, LuaRef selfRef, string sound_asset_path, long? remaining_bullets_count = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundFireLastBullets");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_asset_path);
        if (remaining_bullets_count != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, remaining_bullets_count.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSpread(ILuaVM vm, LuaRef selfRef, LuaRef spread)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSpread");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, spread);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRecoil(ILuaVM vm, LuaRef selfRef, LuaRef recoil)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRecoil");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, recoil);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetUsageSettings(ILuaVM vm, LuaRef selfRef, bool can_hold_use, bool hold_release_use)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetUsageSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_hold_use);
        pc++;
        vm.PushBoolean(hold_release_use);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetWallbangSettings(ILuaVM vm, LuaRef selfRef, long max_distance, LuaRef damage_multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetWallbangSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, max_distance);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, damage_multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static long GetAmmoBag(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAmmoBag");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetAmmoClip(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAmmoClip");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetAmmoToReload(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAmmoToReload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static HandlingMode GetHandlingMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHandlingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<HandlingMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetAnimationCharacterFire(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAnimationCharacterFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetAnimationFire(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAnimationFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetMagazineMesh(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMagazineMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetParticlesBulletTrail(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetParticlesBulletTrail");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetParticlesShells(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetParticlesShells");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundDry(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundDry");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundLoad(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundLoad");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundUnload(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundUnload");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundZooming(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundZooming");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundAim(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundFire(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundFire");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanHoldUse(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanHoldUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetHoldReleaseUse(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHoldReleaseUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static long GetBulletCount(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetBulletCount");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetBulletColor(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetBulletColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetCadence(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCadence");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetClipCapacity(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetClipCapacity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetDamage(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetRightHandOffset(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetRightHandOffset");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetLeftHandLocation(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetLeftHandLocation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetLeftHandRotation(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetLeftHandRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSightLocation(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSightLocation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSightRotation(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSightRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSightFOVMultiplier(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSightFOVMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSpread(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSpread");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetRecoil(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Weapon");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetRecoil");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

