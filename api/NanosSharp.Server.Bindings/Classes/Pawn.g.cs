// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Pawn
{
    public static void AddSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string skeletal_mesh_path, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(skeletal_mesh_path);
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AddStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string static_mesh_path, string? socket = null, LuaRef? relative_location = null, LuaRef? relative_rotation = null, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(static_mesh_path);
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetAllStaticMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string[] GetAllSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static void RemoveSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetStaticMeshAttachedTransform(ILuaVM vm, LuaRef selfRef, string id, LuaRef relative_location, LuaRef relative_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetStaticMeshAttachedTransform");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllStaticMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllStaticMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllSkeletalMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllSkeletalMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void StopAnimation(ILuaVM vm, LuaRef selfRef, string animation_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "StopAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetMesh(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetMovingTo(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMovingTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void MoveTo(ILuaVM vm, LuaRef selfRef, LuaRef location, LuaRef? acceptance_radius = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "MoveTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        if (acceptance_radius != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, acceptance_radius.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Follow(ILuaVM vm, LuaRef selfRef, LuaRef actor, LuaRef? acceptance_radius = null, bool? stop_on_succeed = null, bool? stop_on_fail = null, LuaRef? update_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Follow");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, actor);
        if (acceptance_radius != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, acceptance_radius.Value);
        }
        if (stop_on_succeed != null)
        {
             pc++;
             vm.PushBoolean(stop_on_succeed.Value);
        }
        if (stop_on_fail != null)
        {
             pc++;
             vm.PushBoolean(stop_on_fail.Value);
        }
        if (update_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, update_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void StopMovement(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "StopMovement");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static LuaRef? GetPlayer(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPlayer");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetControlRotation(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetControlRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void HideBone(ILuaVM vm, LuaRef selfRef, string? bone_name = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "HideBone");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void UnHideBone(ILuaVM vm, LuaRef selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "UnHideBone");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsBoneHidden(ILuaVM vm, LuaRef selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsBoneHidden");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void Jump(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Jump");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetJumpZVelocity(ILuaVM vm, LuaRef selfRef, LuaRef jump_z_velocity)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetJumpZVelocity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, jump_z_velocity);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCapsuleSize(ILuaVM vm, LuaRef selfRef, LuaRef radius, LuaRef half_height)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCapsuleSize");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, radius);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, half_height);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanJump(ILuaVM vm, LuaRef selfRef, bool can_jump)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanJump");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_jump);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanCrouch(ILuaVM vm, LuaRef selfRef, bool can_crouch)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanCrouch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_crouch);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetBrakingSettings(ILuaVM vm, LuaRef selfRef, LuaRef? ground_friction = null, LuaRef? braking_friction_factor = null, LuaRef? braking_walking = null, LuaRef? braking_flying = null, LuaRef? braking_swimming = null, LuaRef? braking_falling = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Pawn");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetBrakingSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (ground_friction != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, ground_friction.Value);
        }
        if (braking_friction_factor != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, braking_friction_factor.Value);
        }
        if (braking_walking != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, braking_walking.Value);
        }
        if (braking_flying != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, braking_flying.Value);
        }
        if (braking_swimming != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, braking_swimming.Value);
        }
        if (braking_falling != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, braking_falling.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

