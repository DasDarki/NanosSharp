// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BCharacter : BEntity
{
    public static void Drop(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Drop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void EnterVehicle(ILuaVM vm, LuaRef selfRef, LuaRef vehicle, long? seat = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "EnterVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, vehicle);
        if (seat != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, seat.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void GrabProp(ILuaVM vm, LuaRef selfRef, LuaRef prop)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GrabProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, prop);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void LeaveVehicle(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "LeaveVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void LookAt(ILuaVM vm, LuaRef selfRef, LuaRef location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "LookAt");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PickUp(ILuaVM vm, LuaRef selfRef, LuaRef pickable)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PickUp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, pickable);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PlayAnimation(ILuaVM vm, LuaRef selfRef, string animation_path, AnimationSlotType? slot_type = null, bool? loop_indefinitely = null, LuaRef? blend_in_time = null, LuaRef? blend_out_time = null, LuaRef? play_rate = null, bool? stop_all_montages = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PlayAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_path);
        if (slot_type != null)
        {
             pc++;
             vm.PushEnum(slot_type.Value);
        }
        if (loop_indefinitely != null)
        {
             pc++;
             vm.PushBoolean(loop_indefinitely.Value);
        }
        if (blend_in_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_in_time.Value);
        }
        if (blend_out_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_out_time.Value);
        }
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        if (stop_all_montages != null)
        {
             pc++;
             vm.PushBoolean(stop_all_montages.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunStanding(ILuaVM vm, LuaRef selfRef, string blend_space_path, bool? enable_turn_in_place = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunStanding");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(blend_space_path);
        if (enable_turn_in_place != null)
        {
             pc++;
             vm.PushBoolean(enable_turn_in_place.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunCrouching(ILuaVM vm, LuaRef selfRef, string blend_space_path, bool? enable_turn_in_place = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunCrouching");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(blend_space_path);
        if (enable_turn_in_place != null)
        {
             pc++;
             vm.PushBoolean(enable_turn_in_place.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunProning(ILuaVM vm, LuaRef selfRef, string blend_space_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunProning");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(blend_space_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationsTransitionStandingCrouching(ILuaVM vm, LuaRef selfRef, string standing_to_crouching, string crouching_to_standing)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationsTransitionStandingCrouching");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(standing_to_crouching);
        pc++;
        vm.PushString(crouching_to_standing);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationsTransitionCrouchingProning(ILuaVM vm, LuaRef selfRef, string crouching_to_proning, string pronng_to_crouching)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationsTransitionCrouchingProning");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(crouching_to_proning);
        pc++;
        vm.PushString(pronng_to_crouching);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAccelerationSettings(ILuaVM vm, LuaRef selfRef, long? walking = null, long? parachuting = null, long? skydiving = null, long? falling = null, long? swimming = null, long? swimming_surface = null, long? flying = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAccelerationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (walking != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, walking.Value);
        }
        if (parachuting != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, parachuting.Value);
        }
        if (skydiving != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, skydiving.Value);
        }
        if (falling != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, falling.Value);
        }
        if (swimming != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, swimming.Value);
        }
        if (swimming_surface != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, swimming_surface.Value);
        }
        if (flying != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, flying.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAirControl(ILuaVM vm, LuaRef selfRef, LuaRef? air_control = null, LuaRef? boost_multiplier = null, LuaRef? boost_velocity_threshold = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAirControl");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (air_control != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, air_control.Value);
        }
        if (boost_multiplier != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, boost_multiplier.Value);
        }
        if (boost_velocity_threshold != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, boost_velocity_threshold.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCameraMode(ILuaVM vm, LuaRef selfRef, CameraMode camera_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCameraMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(camera_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanAim(ILuaVM vm, LuaRef selfRef, bool can_aim)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_aim);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDrop(ILuaVM vm, LuaRef selfRef, bool can_drop)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDrop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_drop);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDive(ILuaVM vm, LuaRef selfRef, bool can_dive)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDive");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_dive);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanSprint(ILuaVM vm, LuaRef selfRef, bool can_sprint)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanSprint");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_sprint);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanGrabProps(ILuaVM vm, LuaRef selfRef, bool can_grab_props)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanGrabProps");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_grab_props);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanPickupPickables(ILuaVM vm, LuaRef selfRef, bool can_pickup)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanPickupPickables");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_pickup);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanPunch(ILuaVM vm, LuaRef selfRef, bool can_punch)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanPunch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_punch);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDeployParachute(ILuaVM vm, LuaRef selfRef, bool can_deploy_parachute)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDeployParachute");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_deploy_parachute);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDamageMultiplier(ILuaVM vm, LuaRef selfRef, string bone_name, LuaRef multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDamageMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDeathSound(ILuaVM vm, LuaRef selfRef, string sound_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDeathSound");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFallDamageTaken(ILuaVM vm, LuaRef selfRef, long damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFallDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFlyingMode(ILuaVM vm, LuaRef selfRef, bool flying_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFlyingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(flying_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFOVMultiplier(ILuaVM vm, LuaRef selfRef, LuaRef multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFOVMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHighFallingTime(ILuaVM vm, LuaRef selfRef, LuaRef time)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHighFallingTime");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, time);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHitReactionEnabled(ILuaVM vm, LuaRef selfRef, bool is_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHitReactionEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetGaitMode(ILuaVM vm, LuaRef selfRef, GaitMode gait_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetGaitMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(gait_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetImpactDamageTaken(ILuaVM vm, LuaRef selfRef, long impact_damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetImpactDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, impact_damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRadialDamageToRagdoll(ILuaVM vm, LuaRef selfRef, long damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRadialDamageToRagdoll");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFootstepVolumeMultiplier(ILuaVM vm, LuaRef selfRef, LuaRef volume_multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFootstepVolumeMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, volume_multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetInvulnerable(ILuaVM vm, LuaRef selfRef, bool is_invulnerable)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetInvulnerable");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_invulnerable);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMesh(ILuaVM vm, LuaRef selfRef, string skeletal_mesh_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(skeletal_mesh_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMorphTarget(ILuaVM vm, LuaRef selfRef, string name, LuaRef value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMorphTarget");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, value);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static LuaRef GetMorphTarget(ILuaVM vm, LuaRef selfRef, string name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMorphTarget");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(name);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void ClearMorphTargets(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ClearMorphTargets");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPhysicalAnimationSettings(ILuaVM vm, LuaRef selfRef, string bone, bool include_self, bool is_local_simulation, LuaRef? orientation_strength = null, LuaRef? angular_velocity_strength = null, LuaRef? position_strength = null, LuaRef? velocity_strength = null, LuaRef? max_linear_force = null, LuaRef? max_angular_force = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPhysicalAnimationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone);
        pc++;
        vm.PushBoolean(include_self);
        pc++;
        vm.PushBoolean(is_local_simulation);
        if (orientation_strength != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, orientation_strength.Value);
        }
        if (angular_velocity_strength != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, angular_velocity_strength.Value);
        }
        if (position_strength != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, position_strength.Value);
        }
        if (velocity_strength != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, velocity_strength.Value);
        }
        if (max_linear_force != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_linear_force.Value);
        }
        if (max_angular_force != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_angular_force.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ResetPhysicalAnimationSettings(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ResetPhysicalAnimationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetInputEnabled(ILuaVM vm, LuaRef selfRef, bool is_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetInputEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetParachuteTexture(ILuaVM vm, LuaRef selfRef, string texture)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetParachuteTexture");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(texture);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPainSound(ILuaVM vm, LuaRef selfRef, string sound_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPainSound");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPunchDamage(ILuaVM vm, LuaRef selfRef, long punch_damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPunchDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, punch_damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRagdollMode(ILuaVM vm, LuaRef selfRef, bool ragdoll_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRagdollMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(ragdoll_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSimulatePhysics(ILuaVM vm, LuaRef selfRef, bool simulate_physics)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSimulatePhysics");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(simulate_physics);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSpeedMultiplier(ILuaVM vm, LuaRef selfRef, LuaRef speed_multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSpeedMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, speed_multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetStanceMode(ILuaVM vm, LuaRef selfRef, StanceMode stance_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetStanceMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(stance_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTeam(ILuaVM vm, LuaRef selfRef, long team)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTeam");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, team);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetViewMode(ILuaVM vm, LuaRef selfRef, ViewMode view_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetViewMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(view_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetWeaponAimMode(ILuaVM vm, LuaRef selfRef, AimMode aim_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetWeaponAimMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(aim_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void UnGrabProp(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "UnGrabProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsInRagdollMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInRagdollMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsInvulnerable(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInvulnerable");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsInputEnabled(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInputEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static CameraMode GetCameraMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCameraMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<CameraMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanDrop(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanDrop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanPunch(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanPunch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanAim(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanCrouch(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanCrouch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanSprint(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanSprint");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanGrabProps(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanGrabProps");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanPickupPickables(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanPickupPickables");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetDamageMultiplier(ILuaVM vm, LuaRef selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamageMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetFallDamageTaken(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFallDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static FallingMode GetFallingMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFallingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<FallingMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetFlyingMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFlyingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static GaitMode GetGaitMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetGaitMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<GaitMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetGrabbedProp(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetGrabbedProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetImpactDamageTaken(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetImpactDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetJumpZVelocity(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetJumpZVelocity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetPicked(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPicked");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetPunchDamage(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPunchDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSpeedMultiplier(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSpeedMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static StanceMode GetStanceMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetStanceMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<StanceMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static SwimmingMode GetSwimmingMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSwimmingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<SwimmingMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static long GetTeam(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetTeam");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetVehicle(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static long GetVehicleSeat(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetVehicleSeat");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static ViewMode GetViewMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetViewMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<ViewMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static AimMode GetWeaponAimMode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetWeaponAimMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToEnum<AimMode>(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

