// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Character : Paintable
{
    public static double ApplyDamage(ILuaVM vm, int selfRef, double damage, string? bone_name = null, LuaRef? damage_type = null, LuaRef? from_direction = null, LuaRef? instigator = null, object? causer = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ApplyDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(damage);
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        if (damage_type != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, damage_type.Value);
        }
        if (from_direction != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, from_direction.Value);
        }
        if (instigator != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, instigator.Value);
        }
        if (causer != null)
        {
             pc++;
             vm.PushObject(causer);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void AddSkeletalMeshAttached(ILuaVM vm, int selfRef, string id, string? skeletal_mesh_asset = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        if (skeletal_mesh_asset != null)
        {
             pc++;
             vm.PushString(skeletal_mesh_asset);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AddStaticMeshAttached(ILuaVM vm, int selfRef, string id, string? static_mesh_asset = null, string? socket = null, LuaRef? relative_location = null, LuaRef? relative_rotation = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        if (static_mesh_asset != null)
        {
             pc++;
             vm.PushString(static_mesh_asset);
        }
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Drop(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Drop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void EnterVehicle(ILuaVM vm, int selfRef, LuaRef vehicle, double? seat = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "EnterVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, vehicle);
        if (seat != null)
        {
             pc++;
             vm.PushNumber(seat.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void GrabProp(ILuaVM vm, int selfRef, LuaRef prop)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GrabProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, prop);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void HideBone(ILuaVM vm, int selfRef, string? bone_name = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "HideBone");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void UnHideBone(ILuaVM vm, int selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "UnHideBone");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsBoneHidden(ILuaVM vm, int selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsBoneHidden");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void Jump(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Jump");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void LeaveVehicle(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "LeaveVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void LookAt(ILuaVM vm, int selfRef, LuaRef location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "LookAt");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void MoveTo(ILuaVM vm, int selfRef, LuaRef location, double? acceptance_radius = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "MoveTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        if (acceptance_radius != null)
        {
             pc++;
             vm.PushNumber(acceptance_radius.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Follow(ILuaVM vm, int selfRef, LuaRef actor, double? acceptance_radius = null, bool? stop_on_succeed = null, bool? stop_on_fail = null, double? update_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Follow");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, actor);
        if (acceptance_radius != null)
        {
             pc++;
             vm.PushNumber(acceptance_radius.Value);
        }
        if (stop_on_succeed != null)
        {
             pc++;
             vm.PushBoolean(stop_on_succeed.Value);
        }
        if (stop_on_fail != null)
        {
             pc++;
             vm.PushBoolean(stop_on_fail.Value);
        }
        if (update_rate != null)
        {
             pc++;
             vm.PushNumber(update_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void StopMovement(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "StopMovement");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PickUp(ILuaVM vm, int selfRef, LuaRef pickable)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PickUp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, pickable);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PlayAnimation(ILuaVM vm, int selfRef, string animation_path, LuaRef? slot_type = null, bool? loop_indefinitely = null, double? blend_in_time = null, double? blend_out_time = null, double? play_rate = null, bool? stop_all_montages = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PlayAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_path);
        if (slot_type != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, slot_type.Value);
        }
        if (loop_indefinitely != null)
        {
             pc++;
             vm.PushBoolean(loop_indefinitely.Value);
        }
        if (blend_in_time != null)
        {
             pc++;
             vm.PushNumber(blend_in_time.Value);
        }
        if (blend_out_time != null)
        {
             pc++;
             vm.PushNumber(blend_out_time.Value);
        }
        if (play_rate != null)
        {
             pc++;
             vm.PushNumber(play_rate.Value);
        }
        if (stop_all_montages != null)
        {
             pc++;
             vm.PushBoolean(stop_all_montages.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveSkeletalMeshAttached(ILuaVM vm, int selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveStaticMeshAttached(ILuaVM vm, int selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllStaticMeshesAttached(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllStaticMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllSkeletalMeshesAttached(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllSkeletalMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Respawn(ILuaVM vm, int selfRef, LuaRef? location = null, LuaRef? rotation = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Respawn");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, location.Value);
        }
        if (rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, rotation.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunStanding(ILuaVM vm, int selfRef, LuaRef blend_space_path, bool? enable_turn_in_place = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunStanding");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, blend_space_path);
        if (enable_turn_in_place != null)
        {
             pc++;
             vm.PushBoolean(enable_turn_in_place.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunCrouching(ILuaVM vm, int selfRef, LuaRef blend_space_path, bool? enable_turn_in_place = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunCrouching");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, blend_space_path);
        if (enable_turn_in_place != null)
        {
             pc++;
             vm.PushBoolean(enable_turn_in_place.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationIdleWalkRunProning(ILuaVM vm, int selfRef, LuaRef blend_space_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationIdleWalkRunProning");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, blend_space_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationsTransitionStandingCrouching(ILuaVM vm, int selfRef, LuaRef standing_to_crouching, LuaRef crouching_to_standing)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationsTransitionStandingCrouching");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, standing_to_crouching);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, crouching_to_standing);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationsTransitionCrouchingProning(ILuaVM vm, int selfRef, LuaRef crouching_to_proning, LuaRef pronng_to_crouching)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationsTransitionCrouchingProning");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, crouching_to_proning);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, pronng_to_crouching);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAccelerationSettings(ILuaVM vm, int selfRef, double? walking = null, double? parachuting = null, double? skydiving = null, double? falling = null, double? swimming = null, double? swimming_surface = null, double? flying = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAccelerationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (walking != null)
        {
             pc++;
             vm.PushNumber(walking.Value);
        }
        if (parachuting != null)
        {
             pc++;
             vm.PushNumber(parachuting.Value);
        }
        if (skydiving != null)
        {
             pc++;
             vm.PushNumber(skydiving.Value);
        }
        if (falling != null)
        {
             pc++;
             vm.PushNumber(falling.Value);
        }
        if (swimming != null)
        {
             pc++;
             vm.PushNumber(swimming.Value);
        }
        if (swimming_surface != null)
        {
             pc++;
             vm.PushNumber(swimming_surface.Value);
        }
        if (flying != null)
        {
             pc++;
             vm.PushNumber(flying.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetBrakingSettings(ILuaVM vm, int selfRef, double? ground_friction = null, double? braking_friction_factor = null, double? braking_walking = null, double? braking_flying = null, double? braking_swimming = null, double? braking_falling = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetBrakingSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (ground_friction != null)
        {
             pc++;
             vm.PushNumber(ground_friction.Value);
        }
        if (braking_friction_factor != null)
        {
             pc++;
             vm.PushNumber(braking_friction_factor.Value);
        }
        if (braking_walking != null)
        {
             pc++;
             vm.PushNumber(braking_walking.Value);
        }
        if (braking_flying != null)
        {
             pc++;
             vm.PushNumber(braking_flying.Value);
        }
        if (braking_swimming != null)
        {
             pc++;
             vm.PushNumber(braking_swimming.Value);
        }
        if (braking_falling != null)
        {
             pc++;
             vm.PushNumber(braking_falling.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCameraMode(ILuaVM vm, int selfRef, LuaRef camera_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCameraMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, camera_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanCrouch(ILuaVM vm, int selfRef, bool can_crouch)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanCrouch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_crouch);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanAim(ILuaVM vm, int selfRef, bool can_aim)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_aim);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDrop(ILuaVM vm, int selfRef, bool can_drop)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDrop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_drop);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanJump(ILuaVM vm, int selfRef, bool can_jump)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanJump");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_jump);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDive(ILuaVM vm, int selfRef, bool can_dive)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDive");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_dive);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanSprint(ILuaVM vm, int selfRef, bool can_sprint)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanSprint");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_sprint);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanGrabProps(ILuaVM vm, int selfRef, bool can_grab_props)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanGrabProps");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_grab_props);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanPickupPickables(ILuaVM vm, int selfRef, bool can_pickup)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanPickupPickables");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_pickup);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanPunch(ILuaVM vm, int selfRef, bool can_punch)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanPunch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_punch);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCanDeployParachute(ILuaVM vm, int selfRef, bool can_deploy_parachute)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCanDeployParachute");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(can_deploy_parachute);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCapsuleSize(ILuaVM vm, int selfRef, bool radius, bool half_height)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCapsuleSize");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(radius);
        pc++;
        vm.PushBoolean(half_height);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDamageMultiplier(ILuaVM vm, int selfRef, string bone_name, double multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDamageMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        pc++;
        vm.PushNumber(multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDeathSound(ILuaVM vm, int selfRef, string sound_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDeathSound");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFallDamageTaken(ILuaVM vm, int selfRef, double damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFallDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFlyingMode(ILuaVM vm, int selfRef, bool flying_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFlyingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(flying_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFOVMultiplier(ILuaVM vm, int selfRef, double multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFOVMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHighFallingTime(ILuaVM vm, int selfRef, double time)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHighFallingTime");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(time);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetGaitMode(ILuaVM vm, int selfRef, LuaRef mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetGaitMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetGravityScale(ILuaVM vm, int selfRef, double scale)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetGravityScale");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(scale);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHealth(ILuaVM vm, int selfRef, double new_health)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(new_health);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetImpactDamageTaken(ILuaVM vm, int selfRef, double damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetImpactDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetInvulnerable(ILuaVM vm, int selfRef, bool is_invulnerable)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetInvulnerable");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_invulnerable);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetJumpZVelocity(ILuaVM vm, int selfRef, double velocity)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetJumpZVelocity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(velocity);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMaxHealth(ILuaVM vm, int selfRef, double new_max_health)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMaxHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(new_max_health);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMesh(ILuaVM vm, int selfRef, string skeletal_mesh_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(skeletal_mesh_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMorphTarget(ILuaVM vm, int selfRef, string name, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMorphTarget");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(name);
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static double GetMorphTarget(ILuaVM vm, int selfRef, string name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMorphTarget");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(name);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void ClearMorphTargets(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ClearMorphTargets");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPhysicalAnimationSettings(ILuaVM vm, int selfRef, string bone, bool include_self, bool is_local_simulation, bool? orientation_strength = null, bool? angular_velocity_strength = null, bool? position_strength = null, bool? velocity_strength = null, bool? max_linear_force = null, bool? max_angular_force = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPhysicalAnimationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone);
        pc++;
        vm.PushBoolean(include_self);
        pc++;
        vm.PushBoolean(is_local_simulation);
        if (orientation_strength != null)
        {
             pc++;
             vm.PushBoolean(orientation_strength.Value);
        }
        if (angular_velocity_strength != null)
        {
             pc++;
             vm.PushBoolean(angular_velocity_strength.Value);
        }
        if (position_strength != null)
        {
             pc++;
             vm.PushBoolean(position_strength.Value);
        }
        if (velocity_strength != null)
        {
             pc++;
             vm.PushBoolean(velocity_strength.Value);
        }
        if (max_linear_force != null)
        {
             pc++;
             vm.PushBoolean(max_linear_force.Value);
        }
        if (max_angular_force != null)
        {
             pc++;
             vm.PushBoolean(max_angular_force.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ResetPhysicalAnimationSettings(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ResetPhysicalAnimationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMovementEnabled(ILuaVM vm, int selfRef, bool is_movement_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMovementEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_movement_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetParachuteTexture(ILuaVM vm, int selfRef, string texture)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetParachuteTexture");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(texture);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPainSound(ILuaVM vm, int selfRef, string sound_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPainSound");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(sound_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPunchDamage(ILuaVM vm, int selfRef, double damage)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPunchDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(damage);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRagdollMode(ILuaVM vm, int selfRef, bool ragdoll_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRagdollMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(ragdoll_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSimulatePhysics(ILuaVM vm, int selfRef, bool simulate_physics)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSimulatePhysics");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(simulate_physics);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSpeedMultiplier(ILuaVM vm, int selfRef, double multiplier)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSpeedMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(multiplier);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetStanceMode(ILuaVM vm, int selfRef, LuaRef mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetStanceMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTeam(ILuaVM vm, int selfRef, double team)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTeam");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(team);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetViewMode(ILuaVM vm, int selfRef, LuaRef view_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetViewMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, view_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetWeaponAimMode(ILuaVM vm, int selfRef, LuaRef aim_mode)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetWeaponAimMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, aim_mode);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void StopAnimation(ILuaVM vm, int selfRef, string animation_asset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "StopAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_asset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void UnGrabProp(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "UnGrabProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsInRagdollMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInRagdollMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsInvulnerable(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInvulnerable");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsMovementEnabled(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsMovementEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetCameraMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCameraMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanDrop(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanDrop");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanPunch(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanPunch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanAim(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanAim");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanCrouch(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanCrouch");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanSprint(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanSprint");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanGrabProps(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanGrabProps");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool GetCanPickupPickables(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCanPickupPickables");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public struct GetCapsuleSize_Return0
    {
        public double Radius;
        public double HalfHeight;
        public static implicit operator GetCapsuleSize_Return0(Dictionary<string, object> d)
        {
            return new GetCapsuleSize_Return0
            {
                Radius = (double)d["Radius"],
                HalfHeight = (double)d["HalfHeight"],
            };
        }
    }

    public static GetCapsuleSize_Return0 GetCapsuleSize(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCapsuleSize");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToTable(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetControlRotation(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetControlRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetDamageMultiplier(ILuaVM vm, int selfRef, string bone_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamageMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(bone_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetFallDamageTaken(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFallDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetFallingMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFallingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static bool GetFlyingMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFlyingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetGaitMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetGaitMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetGrabbedProp(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetGrabbedProp");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetGravityScale(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetGravityScale");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetHealth(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetImpactDamageTaken(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetImpactDamageTaken");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetJumpZVelocity(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetJumpZVelocity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetMaxHealth(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMaxHealth");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetMesh(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetMovingTo(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMovingTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetPicked(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPicked");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetPlayer(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPlayer");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetPunchDamage(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPunchDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetSpeedMultiplier(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSpeedMultiplier");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetStanceMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetStanceMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetSwimmingMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSwimmingMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetTeam(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetTeam");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef? GetVehicle(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetVehicle");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetViewMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetViewMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetWeaponAimMode(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Character");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetWeaponAimMode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

