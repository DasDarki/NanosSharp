// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Trigger : Actor
{
    public static void ForceOverlapChecking(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Trigger");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ForceOverlapChecking");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetExtent(ILuaVM vm, LuaRef selfRef, LuaRef extent)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Trigger");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetExtent");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, extent);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetColor(ILuaVM vm, LuaRef selfRef, LuaRef color)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Trigger");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, color);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetOverlapOnlyClasses(ILuaVM vm, LuaRef selfRef, string[] overlap_only_classes)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Trigger");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetOverlapOnlyClasses");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushArray(overlap_only_classes);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

