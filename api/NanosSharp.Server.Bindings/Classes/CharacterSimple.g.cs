// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BCharacterSimple : BEntity
{
    public static void SetMesh(ILuaVM vm, LuaRef selfRef, string mesh_asset, bool adjust_capsule_size)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(mesh_asset);
        pc++;
        vm.PushBoolean(adjust_capsule_size);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PlayAnimation(ILuaVM vm, LuaRef selfRef, string animation_path, string? slot_name = null, bool? loop_indefinitely = null, LuaRef? blend_in_time = null, LuaRef? blend_out_time = null, LuaRef? play_rate = null, bool? stop_all_montages = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PlayAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_path);
        if (slot_name != null)
        {
             pc++;
             vm.PushString(slot_name);
        }
        if (loop_indefinitely != null)
        {
             pc++;
             vm.PushBoolean(loop_indefinitely.Value);
        }
        if (blend_in_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_in_time.Value);
        }
        if (blend_out_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_out_time.Value);
        }
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        if (stop_all_montages != null)
        {
             pc++;
             vm.PushBoolean(stop_all_montages.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMaxAcceleration(ILuaVM vm, LuaRef selfRef, long acceleration)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMaxAcceleration");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, acceleration);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSpringArmSettings(ILuaVM vm, LuaRef selfRef, LuaRef? relative_location = null, LuaRef? target_arm_length = null, LuaRef? socket_offset = null, bool? enable_camera_lag = null, LuaRef? camera_lag_speed = null, LuaRef? camera_lag_max_distance = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSpringArmSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (target_arm_length != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, target_arm_length.Value);
        }
        if (socket_offset != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, socket_offset.Value);
        }
        if (enable_camera_lag != null)
        {
             pc++;
             vm.PushBoolean(enable_camera_lag.Value);
        }
        if (camera_lag_speed != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, camera_lag_speed.Value);
        }
        if (camera_lag_max_distance != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, camera_lag_max_distance.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRotationSettings(ILuaVM vm, LuaRef selfRef, LuaRef rotation_rate, bool use_controller_desired_rotation, bool orient_rotation_to_movement)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRotationSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, rotation_rate);
        pc++;
        vm.PushBoolean(use_controller_desired_rotation);
        pc++;
        vm.PushBoolean(orient_rotation_to_movement);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSpeedSettings(ILuaVM vm, LuaRef selfRef, long max_walk_speed, long max_walk_speed_crouched)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSpeedSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, max_walk_speed);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, max_walk_speed_crouched);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPawnSettings(ILuaVM vm, LuaRef selfRef, bool use_controller_rotation_pitch, bool use_controller_rotation_yaw, bool use_controller_rotation_roll)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPawnSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(use_controller_rotation_pitch);
        pc++;
        vm.PushBoolean(use_controller_rotation_yaw);
        pc++;
        vm.PushBoolean(use_controller_rotation_roll);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAirControl(ILuaVM vm, LuaRef selfRef, LuaRef? air_control = null, LuaRef? boost_multiplier = null, LuaRef? boost_velocity_threshold = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAirControl");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (air_control != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, air_control.Value);
        }
        if (boost_multiplier != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, boost_multiplier.Value);
        }
        if (boost_velocity_threshold != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, boost_velocity_threshold.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAnimationBlueprint(ILuaVM vm, LuaRef selfRef, string custom_animation_blueprint)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAnimationBlueprint");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(custom_animation_blueprint);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static LuaRef CallAnimationBlueprintEvent(ILuaVM vm, LuaRef selfRef, string event_name, params object[] arguments)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "CharacterSimple");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "CallAnimationBlueprintEvent");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(event_name);
        foreach (var a in arguments) {
            pc++;
            vm.PushObject(a);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

