// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BVehicleWheeled : BEntity
{
    public static void Horn(ILuaVM vm, LuaRef selfRef, bool enable_horn)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Horn");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(enable_horn);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RecreatePhysics(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RecreatePhysics");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCameraOffset(ILuaVM vm, LuaRef selfRef, LuaRef offset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCameraOffset");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, offset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAutoStartEngine(ILuaVM vm, LuaRef selfRef, bool auto_start)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAutoStartEngine");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(auto_start);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetEngineStarted(ILuaVM vm, LuaRef selfRef, bool started)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetEngineStarted");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(started);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSteeringSetup(ILuaVM vm, LuaRef selfRef, SteeringType steering_type, LuaRef? angle_ratio = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSteeringSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushEnum(steering_type);
        if (angle_ratio != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, angle_ratio.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetEngineSetup(ILuaVM vm, LuaRef selfRef, long? max_torque = null, long? max_rpm = null, long? idle_rpm = null, LuaRef? brake_effect = null, long? rev_up_moi = null, long? rev_down_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetEngineSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (max_torque != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_torque.Value);
        }
        if (max_rpm != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_rpm.Value);
        }
        if (idle_rpm != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, idle_rpm.Value);
        }
        if (brake_effect != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, brake_effect.Value);
        }
        if (rev_up_moi != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, rev_up_moi.Value);
        }
        if (rev_down_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, rev_down_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAerodynamicsSetup(ILuaVM vm, LuaRef selfRef, long? mass = null, LuaRef? drag_coefficient = null, long? vehicle_chassis_width = null, long? vehicle_chassis_height = null, LuaRef? vehicle_downforce_coefficient = null, LuaRef? center_of_mass_override = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAerodynamicsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (mass != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, mass.Value);
        }
        if (drag_coefficient != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, drag_coefficient.Value);
        }
        if (vehicle_chassis_width != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, vehicle_chassis_width.Value);
        }
        if (vehicle_chassis_height != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, vehicle_chassis_height.Value);
        }
        if (vehicle_downforce_coefficient != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, vehicle_downforce_coefficient.Value);
        }
        if (center_of_mass_override != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, center_of_mass_override.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTransmissionSetup(ILuaVM vm, LuaRef selfRef, LuaRef? transmission_final_ratio = null, long? transmission_change_up_rpm = null, long? transmission_change_down_rpm = null, LuaRef? transmission_gear_change_time = null, LuaRef? transmission_efficiency = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTransmissionSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (transmission_final_ratio != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, transmission_final_ratio.Value);
        }
        if (transmission_change_up_rpm != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, transmission_change_up_rpm.Value);
        }
        if (transmission_change_down_rpm != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, transmission_change_down_rpm.Value);
        }
        if (transmission_gear_change_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, transmission_gear_change_time.Value);
        }
        if (transmission_efficiency != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, transmission_efficiency.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetWheel(ILuaVM vm, LuaRef selfRef, long index, string bone_name, long? radius = null, long? width = null, long? max_steer_angle = null, LuaRef? offset = null, bool? is_affected_by_engine = null, bool? is_affected_by_brake = null, bool? is_affected_by_handbrake = null, bool? has_abs_enabled = null, bool? has_traction_control_enabled = null, long? max_brake_torque = null, long? max_handbrake_torque = null, long? cornering_stiffness = null, LuaRef? side_slip_modifier = null, LuaRef? friction_force_multiplier = null, LuaRef? slip_threshold = null, LuaRef? skid_threshold = null, LuaRef? suspension_spring_rate = null, LuaRef? suspension_spring_preload = null, LuaRef? suspension_max_raise = null, LuaRef? suspension_max_drop = null, LuaRef? suspension_smoothing = null, LuaRef? suspension_damping_ratio = null, LuaRef? suspension_wheel_load_ratio = null, LuaRef? suspension_axis = null, LuaRef? suspension_force_offset = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetWheel");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, index);
        pc++;
        vm.PushString(bone_name);
        if (radius != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, radius.Value);
        }
        if (width != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, width.Value);
        }
        if (max_steer_angle != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_steer_angle.Value);
        }
        if (offset != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, offset.Value);
        }
        if (is_affected_by_engine != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_engine.Value);
        }
        if (is_affected_by_brake != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_brake.Value);
        }
        if (is_affected_by_handbrake != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_handbrake.Value);
        }
        if (has_abs_enabled != null)
        {
             pc++;
             vm.PushBoolean(has_abs_enabled.Value);
        }
        if (has_traction_control_enabled != null)
        {
             pc++;
             vm.PushBoolean(has_traction_control_enabled.Value);
        }
        if (max_brake_torque != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_brake_torque.Value);
        }
        if (max_handbrake_torque != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, max_handbrake_torque.Value);
        }
        if (cornering_stiffness != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, cornering_stiffness.Value);
        }
        if (side_slip_modifier != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, side_slip_modifier.Value);
        }
        if (friction_force_multiplier != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, friction_force_multiplier.Value);
        }
        if (slip_threshold != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, slip_threshold.Value);
        }
        if (skid_threshold != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, skid_threshold.Value);
        }
        if (suspension_spring_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_spring_rate.Value);
        }
        if (suspension_spring_preload != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_spring_preload.Value);
        }
        if (suspension_max_raise != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_max_raise.Value);
        }
        if (suspension_max_drop != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_max_drop.Value);
        }
        if (suspension_smoothing != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_smoothing.Value);
        }
        if (suspension_damping_ratio != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_damping_ratio.Value);
        }
        if (suspension_wheel_load_ratio != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_wheel_load_ratio.Value);
        }
        if (suspension_axis != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_axis.Value);
        }
        if (suspension_force_offset != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_force_offset.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSteeringWheelSetup(ILuaVM vm, LuaRef selfRef, LuaRef location, long radius)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSteeringWheelSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, radius);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHeadlightsSetup(ILuaVM vm, LuaRef selfRef, LuaRef location, LuaRef? color = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHeadlightsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        if (color != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, color.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTaillightsSetup(ILuaVM vm, LuaRef selfRef, LuaRef location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTaillightsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTireFlat(ILuaVM vm, LuaRef selfRef, long wheel_index, bool is_flat)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "VehicleWheeled");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTireFlat");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, wheel_index);
        pc++;
        vm.PushBoolean(is_flat);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

