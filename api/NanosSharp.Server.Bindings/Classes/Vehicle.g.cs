// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Vehicle : Paintable
{
    public static void AddStaticMeshAttached(ILuaVM vm, int selfRef, string id, string? static_mesh_asset = null, string? socket = null, LuaRef? relative_location = null, LuaRef? relative_rotation = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        if (static_mesh_asset != null)
        {
             pc++;
             vm.PushString(static_mesh_asset);
        }
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Horn(ILuaVM vm, int selfRef, bool enable_horn)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Horn");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(enable_horn);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RecreatePhysics(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RecreatePhysics");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveStaticMeshAttached(ILuaVM vm, int selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllStaticMeshesAttached(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllStaticMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAutoStartEngine(ILuaVM vm, int selfRef, bool auto_start)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAutoStartEngine");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(auto_start);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetEngineStarted(ILuaVM vm, int selfRef, bool started)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetEngineStarted");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(started);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDifferentialSetup(ILuaVM vm, int selfRef, LuaRef? differential_type = null, double? front_rear_split = null, double? front_left_right_split = null, double? rear_left_right_split = null, double? center_bias = null, double? front_bias = null, double? rear_bias = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDifferentialSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (differential_type != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, differential_type.Value);
        }
        if (front_rear_split != null)
        {
             pc++;
             vm.PushNumber(front_rear_split.Value);
        }
        if (front_left_right_split != null)
        {
             pc++;
             vm.PushNumber(front_left_right_split.Value);
        }
        if (rear_left_right_split != null)
        {
             pc++;
             vm.PushNumber(rear_left_right_split.Value);
        }
        if (center_bias != null)
        {
             pc++;
             vm.PushNumber(center_bias.Value);
        }
        if (front_bias != null)
        {
             pc++;
             vm.PushNumber(front_bias.Value);
        }
        if (rear_bias != null)
        {
             pc++;
             vm.PushNumber(rear_bias.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetEngineSetup(ILuaVM vm, int selfRef, double? max_torque = null, double? max_rpm = null, double? idle_rpm = null, double? brake_effect = null, double? rev_up_moi = null, double? rev_down_rate = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetEngineSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (max_torque != null)
        {
             pc++;
             vm.PushNumber(max_torque.Value);
        }
        if (max_rpm != null)
        {
             pc++;
             vm.PushNumber(max_rpm.Value);
        }
        if (idle_rpm != null)
        {
             pc++;
             vm.PushNumber(idle_rpm.Value);
        }
        if (brake_effect != null)
        {
             pc++;
             vm.PushNumber(brake_effect.Value);
        }
        if (rev_up_moi != null)
        {
             pc++;
             vm.PushNumber(rev_up_moi.Value);
        }
        if (rev_down_rate != null)
        {
             pc++;
             vm.PushNumber(rev_down_rate.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAerodynamicsSetup(ILuaVM vm, int selfRef, double? mass = null, double? drag_coefficient = null, double? vehicle_chassis_width = null, double? vehicle_chassis_height = null, double? vehicle_downforce_coefficient = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAerodynamicsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (mass != null)
        {
             pc++;
             vm.PushNumber(mass.Value);
        }
        if (drag_coefficient != null)
        {
             pc++;
             vm.PushNumber(drag_coefficient.Value);
        }
        if (vehicle_chassis_width != null)
        {
             pc++;
             vm.PushNumber(vehicle_chassis_width.Value);
        }
        if (vehicle_chassis_height != null)
        {
             pc++;
             vm.PushNumber(vehicle_chassis_height.Value);
        }
        if (vehicle_downforce_coefficient != null)
        {
             pc++;
             vm.PushNumber(vehicle_downforce_coefficient.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTransmissionSetup(ILuaVM vm, int selfRef, double? transmission_final_ratio = null, double? transmission_change_up_rpm = null, double? transmission_change_down_rpm = null, double? transmission_gear_change_time = null, double? transmission_efficiency = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTransmissionSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (transmission_final_ratio != null)
        {
             pc++;
             vm.PushNumber(transmission_final_ratio.Value);
        }
        if (transmission_change_up_rpm != null)
        {
             pc++;
             vm.PushNumber(transmission_change_up_rpm.Value);
        }
        if (transmission_change_down_rpm != null)
        {
             pc++;
             vm.PushNumber(transmission_change_down_rpm.Value);
        }
        if (transmission_gear_change_time != null)
        {
             pc++;
             vm.PushNumber(transmission_gear_change_time.Value);
        }
        if (transmission_efficiency != null)
        {
             pc++;
             vm.PushNumber(transmission_efficiency.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetWheel(ILuaVM vm, int selfRef, double index, string bone_name, double? radius = null, double? width = null, double? max_steer_angle = null, LuaRef? offset = null, bool? is_affected_by_engine = null, bool? is_affected_by_brake = null, bool? is_affected_by_handbrake = null, bool? has_abs_enabled = null, bool? has_traction_control_enabled = null, double? max_brake_torque = null, double? max_handbrake_torque = null, double? cornering_stiffness = null, double? side_slip_modifier = null, double? friction_force_multiplier = null, double? slip_threshold = null, double? skid_threshold = null, double? suspension_spring_rate = null, double? suspension_spring_preload = null, double? suspension_max_raise = null, double? suspension_max_drop = null, double? suspension_smoothing = null, double? suspension_damping_ratio = null, double? suspension_wheel_load_ratio = null, LuaRef? suspension_axis = null, LuaRef? suspension_force_offset = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetWheel");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(index);
        pc++;
        vm.PushString(bone_name);
        if (radius != null)
        {
             pc++;
             vm.PushNumber(radius.Value);
        }
        if (width != null)
        {
             pc++;
             vm.PushNumber(width.Value);
        }
        if (max_steer_angle != null)
        {
             pc++;
             vm.PushNumber(max_steer_angle.Value);
        }
        if (offset != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, offset.Value);
        }
        if (is_affected_by_engine != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_engine.Value);
        }
        if (is_affected_by_brake != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_brake.Value);
        }
        if (is_affected_by_handbrake != null)
        {
             pc++;
             vm.PushBoolean(is_affected_by_handbrake.Value);
        }
        if (has_abs_enabled != null)
        {
             pc++;
             vm.PushBoolean(has_abs_enabled.Value);
        }
        if (has_traction_control_enabled != null)
        {
             pc++;
             vm.PushBoolean(has_traction_control_enabled.Value);
        }
        if (max_brake_torque != null)
        {
             pc++;
             vm.PushNumber(max_brake_torque.Value);
        }
        if (max_handbrake_torque != null)
        {
             pc++;
             vm.PushNumber(max_handbrake_torque.Value);
        }
        if (cornering_stiffness != null)
        {
             pc++;
             vm.PushNumber(cornering_stiffness.Value);
        }
        if (side_slip_modifier != null)
        {
             pc++;
             vm.PushNumber(side_slip_modifier.Value);
        }
        if (friction_force_multiplier != null)
        {
             pc++;
             vm.PushNumber(friction_force_multiplier.Value);
        }
        if (slip_threshold != null)
        {
             pc++;
             vm.PushNumber(slip_threshold.Value);
        }
        if (skid_threshold != null)
        {
             pc++;
             vm.PushNumber(skid_threshold.Value);
        }
        if (suspension_spring_rate != null)
        {
             pc++;
             vm.PushNumber(suspension_spring_rate.Value);
        }
        if (suspension_spring_preload != null)
        {
             pc++;
             vm.PushNumber(suspension_spring_preload.Value);
        }
        if (suspension_max_raise != null)
        {
             pc++;
             vm.PushNumber(suspension_max_raise.Value);
        }
        if (suspension_max_drop != null)
        {
             pc++;
             vm.PushNumber(suspension_max_drop.Value);
        }
        if (suspension_smoothing != null)
        {
             pc++;
             vm.PushNumber(suspension_smoothing.Value);
        }
        if (suspension_damping_ratio != null)
        {
             pc++;
             vm.PushNumber(suspension_damping_ratio.Value);
        }
        if (suspension_wheel_load_ratio != null)
        {
             pc++;
             vm.PushNumber(suspension_wheel_load_ratio.Value);
        }
        if (suspension_axis != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_axis.Value);
        }
        if (suspension_force_offset != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, suspension_force_offset.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDoor(ILuaVM vm, int selfRef, double seat_index, LuaRef offset_location, LuaRef seat_location, LuaRef seat_rotation, double trigger_radius, double leave_lateral_offset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDoor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(seat_index);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, offset_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat_rotation);
        pc++;
        vm.PushNumber(trigger_radius);
        pc++;
        vm.PushNumber(leave_lateral_offset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSteeringWheelSetup(ILuaVM vm, int selfRef, LuaRef location, double radius)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSteeringWheelSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        pc++;
        vm.PushNumber(radius);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetHeadlightsSetup(ILuaVM vm, int selfRef, LuaRef location, LuaRef? color = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetHeadlightsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        if (color != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, color.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTaillightsSetup(ILuaVM vm, int selfRef, LuaRef location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTaillightsSetup");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetAssetName(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAssetName");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetPassenger(ILuaVM vm, int selfRef, double seat)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPassenger");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(seat);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef[] GetPassengers(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPassengers");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToRefArray(-1);
        vm.ClearStack();
        return r0;
    }

}

