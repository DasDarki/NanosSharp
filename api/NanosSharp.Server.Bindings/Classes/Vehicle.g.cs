// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BVehicle
{
    public static void AddSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string skeletal_mesh_path, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(skeletal_mesh_path);
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AddStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id, string static_mesh_path, string? socket = null, LuaRef? relative_location = null, LuaRef? relative_rotation = null, bool? use_parent_bounds = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.PushString(static_mesh_path);
        if (socket != null)
        {
             pc++;
             vm.PushString(socket);
        }
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (relative_rotation != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation.Value);
        }
        if (use_parent_bounds != null)
        {
             pc++;
             vm.PushBoolean(use_parent_bounds.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetAllStaticMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string[] GetAllSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAllSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static void RemoveSkeletalMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveSkeletalMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetStaticMeshAttachedTransform(ILuaVM vm, LuaRef selfRef, string id, LuaRef relative_location, LuaRef relative_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetStaticMeshAttachedTransform");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveStaticMeshAttached(ILuaVM vm, LuaRef selfRef, string id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveStaticMeshAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllStaticMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllStaticMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RemoveAllSkeletalMeshesAttached(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RemoveAllSkeletalMeshesAttached");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDoor(ILuaVM vm, LuaRef selfRef, long seat_index, LuaRef offset_location, LuaRef seat_location, LuaRef seat_rotation, long trigger_radius, long leave_lateral_offset)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDoor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat_index);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, offset_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat_location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat_rotation);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, trigger_radius);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, leave_lateral_offset);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void PlayAnimation(ILuaVM vm, LuaRef selfRef, string animation_path, string? slot_name = null, bool? loop_indefinitely = null, LuaRef? blend_in_time = null, LuaRef? blend_out_time = null, LuaRef? play_rate = null, bool? stop_all_montages = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "PlayAnimation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(animation_path);
        if (slot_name != null)
        {
             pc++;
             vm.PushString(slot_name);
        }
        if (loop_indefinitely != null)
        {
             pc++;
             vm.PushBoolean(loop_indefinitely.Value);
        }
        if (blend_in_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_in_time.Value);
        }
        if (blend_out_time != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, blend_out_time.Value);
        }
        if (play_rate != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, play_rate.Value);
        }
        if (stop_all_montages != null)
        {
             pc++;
             vm.PushBoolean(stop_all_montages.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetMesh(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMesh");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public struct GetDoors_Return0
    {
        public long seat_index;
        public LuaRef offset_location;
        public LuaRef seat_location;
        public LuaRef seat_rotation;
        public long leave_lateral_offset;
        public long sphere_radius;
        public static implicit operator GetDoors_Return0(Dictionary<string, object> d)
        {
            return new GetDoors_Return0
            {
                seat_index = (long)d["seat_index"],
                offset_location = (LuaRef)d["offset_location"],
                seat_location = (LuaRef)d["seat_location"],
                seat_rotation = (LuaRef)d["seat_rotation"],
                leave_lateral_offset = (long)d["leave_lateral_offset"],
                sphere_radius = (long)d["sphere_radius"],
            };
        }
    }

    public static GetDoors_Return0 GetDoors(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDoors");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToTable(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetPassenger(ILuaVM vm, LuaRef selfRef, long seat)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPassenger");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, seat);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef[] GetPassengers(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPassengers");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToRefArray(-1);
        vm.ClearStack();
        return r0;
    }

    public static void SetExplosionSettings(ILuaVM vm, LuaRef selfRef, LuaRef engine_relative_location, Dictionary<string, object> materials_index_burnt_override, Dictionary<string, object> materials_index_burnt_invisible)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Vehicle");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetExplosionSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, engine_relative_location);
        pc++;
        vm.PushTable(materials_index_burnt_override);
        pc++;
        vm.PushTable(materials_index_burnt_invisible);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

