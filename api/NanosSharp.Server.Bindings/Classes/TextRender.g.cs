// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class TextRender : Paintable
{
    public static void SetColor(ILuaVM vm, int selfRef, int color)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetColor");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, color);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFont(ILuaVM vm, int selfRef, int font_type)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFont");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, font_type);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetFreeze(ILuaVM vm, int selfRef, bool freeze)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetFreeze");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(freeze);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetGlyphSettings(ILuaVM vm, int selfRef, double? extrude = null, double? level = null, int? bevel_type = null, double? bevel_segments = null, bool? outline = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetGlyphSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (extrude != null)
        {
             pc++;
             vm.PushNumber(extrude.Value);
        }
        if (level != null)
        {
             pc++;
             vm.PushNumber(level.Value);
        }
        if (bevel_type != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, bevel_type.Value);
        }
        if (bevel_segments != null)
        {
             pc++;
             vm.PushNumber(bevel_segments.Value);
        }
        if (outline != null)
        {
             pc++;
             vm.PushBoolean(outline.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMaxSize(ILuaVM vm, int selfRef, double? max_width = null, double? max_height = null, bool? scale_proportionally = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetMaxSize");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (max_width != null)
        {
             pc++;
             vm.PushNumber(max_width.Value);
        }
        if (max_height != null)
        {
             pc++;
             vm.PushNumber(max_height.Value);
        }
        if (scale_proportionally != null)
        {
             pc++;
             vm.PushBoolean(scale_proportionally.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetText(ILuaVM vm, int selfRef, string text)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetText");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(text);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTextSettings(ILuaVM vm, int selfRef, double? kerning = null, double? line_spacing = null, double? word_spacing = null, int? horizontal_alignment = null, int? vertical_alignment = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "TextRender");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTextSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (kerning != null)
        {
             pc++;
             vm.PushNumber(kerning.Value);
        }
        if (line_spacing != null)
        {
             pc++;
             vm.PushNumber(line_spacing.Value);
        }
        if (word_spacing != null)
        {
             pc++;
             vm.PushNumber(word_spacing.Value);
        }
        if (horizontal_alignment != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, horizontal_alignment.Value);
        }
        if (vertical_alignment != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, vertical_alignment.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

