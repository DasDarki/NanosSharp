// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Actor
{
    public static void AddImpulse(ILuaVM vm, int selfRef, int force, bool? velocity_change = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddImpulse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, force);
        if (velocity_change != null)
        {
             pc++;
             vm.PushBoolean(velocity_change.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AttachTo(ILuaVM vm, int selfRef, int other, int? attachment_rule = null, string? bone_name = null, double? lifespan_when_detached = null, bool? use_absolute_rotation = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AttachTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, other);
        if (attachment_rule != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, attachment_rule.Value);
        }
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        if (lifespan_when_detached != null)
        {
             pc++;
             vm.PushNumber(lifespan_when_detached.Value);
        }
        if (use_absolute_rotation != null)
        {
             pc++;
             vm.PushBoolean(use_absolute_rotation.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Destroy(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Destroy");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Detach(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Detach");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCollision(ILuaVM vm, int selfRef, int collision_type)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCollision");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, collision_type);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetForce(ILuaVM vm, int selfRef, int force, bool? is_local = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetForce");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, force);
        if (is_local != null)
        {
             pc++;
             vm.PushBoolean(is_local.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetGravityEnabled(ILuaVM vm, int selfRef, bool is_enabled)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetGravityEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_enabled);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetVisibility(ILuaVM vm, int selfRef, bool is_visible)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetVisibility");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushBoolean(is_visible);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetLifeSpan(ILuaVM vm, int selfRef, double seconds)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetLifeSpan");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(seconds);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetLocation(ILuaVM vm, int selfRef, int location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetLocation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRotation(ILuaVM vm, int selfRef, int rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRelativeLocation(ILuaVM vm, int selfRef, int relative_location)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRelativeLocation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_location);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRelativeRotation(ILuaVM vm, int selfRef, int relative_rotation)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRelativeRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, relative_rotation);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetScale(ILuaVM vm, int selfRef, int scale)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetScale");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, scale);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetNetworkAuthority(ILuaVM vm, int selfRef, int? player = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetNetworkAuthority");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (player != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, player.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetValue(ILuaVM vm, int selfRef, string key, object value, bool? sync_on_clients = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetValue");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(key);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, value);
        if (sync_on_clients != null)
        {
             pc++;
             vm.PushBoolean(sync_on_clients.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void TranslateTo(ILuaVM vm, int selfRef, int location, double time, double? exp = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "TranslateTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        pc++;
        vm.PushNumber(time);
        if (exp != null)
        {
             pc++;
             vm.PushNumber(exp.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void RotateTo(ILuaVM vm, int selfRef, int rotation, double time, double? exp = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RotateTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, rotation);
        pc++;
        vm.PushNumber(time);
        if (exp != null)
        {
             pc++;
             vm.PushNumber(exp.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsBeingDestroyed(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsBeingDestroyed");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsVisible(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsVisible");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsGravityEnabled(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsGravityEnabled");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsInWater(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsInWater");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsNetworkDistributed(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsNetworkDistributed");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsValid(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "IsValid");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static int[] GetAttachedEntities(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAttachedEntities");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        vm.ClearStack();
        return r0;
    }

    public static int? GetAttachedTo(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAttachedTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetCollision(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCollision");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetID(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetID");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static int GetLocation(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetLocation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetRotation(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetRotation");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetForce(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetForce");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetScale(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetScale");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static string GetType(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetType");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static object GetValue(ILuaVM vm, int selfRef, string key, object fallback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetValue");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(key);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, fallback);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetVelocity(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetVelocity");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int Subscribe(ILuaVM vm, int selfRef, string event_name, int callback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Subscribe");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(event_name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, callback);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void Unsubscribe(ILuaVM vm, int selfRef, string event_name, int? callback = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Unsubscribe");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(event_name);
        if (callback != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, callback.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static int[] GetAll(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "GetAll");
        vm.MCall(pc, 1);
        vm.ClearStack();
        return r0;
    }

    public static int GetByIndex(ILuaVM vm, double index)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "GetByIndex");
        pc++;
        vm.PushNumber(index);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static double GetCount(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Actor");
        vm.GetField(-1, "GetCount");
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

