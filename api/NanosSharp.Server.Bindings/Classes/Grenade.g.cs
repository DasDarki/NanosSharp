// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Grenade : Pickable
{
    public static void Explode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Explode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDamage(ILuaVM vm, LuaRef selfRef, LuaRef? base_damage = null, LuaRef? minimum_damage = null, LuaRef? damage_inner_radius = null, LuaRef? damage_outer_radius = null, LuaRef? damage_falloff = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (base_damage != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, base_damage.Value);
        }
        if (minimum_damage != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, minimum_damage.Value);
        }
        if (damage_inner_radius != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, damage_inner_radius.Value);
        }
        if (damage_outer_radius != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, damage_outer_radius.Value);
        }
        if (damage_falloff != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, damage_falloff.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetTimeToExplode(ILuaVM vm, LuaRef selfRef, LuaRef time)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetTimeToExplode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, time);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetThrowForce(ILuaVM vm, LuaRef selfRef, LuaRef throw_force)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetThrowForce");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, throw_force);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static LuaRef GetBaseDamage(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetBaseDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetDamageFalloff(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamageFalloff");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetDamageInnerRadius(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamageInnerRadius");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetDamageOuterRadius(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDamageOuterRadius");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetMinimumDamage(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetMinimumDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetTimeToExplode(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetTimeToExplode");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetThrowForce(ILuaVM vm, LuaRef selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Grenade");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetThrowForce");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

