// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Melee : Pickable
{
    public static void AddAnimationCharacterUse(ILuaVM vm, int selfRef, string asset_path, double play_rate, LuaRef slot_Type)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AddAnimationCharacterUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(asset_path);
        pc++;
        vm.PushNumber(play_rate);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, slot_Type);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ClearAnimationsCharacterUse(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ClearAnimationsCharacterUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetImpactSound(ILuaVM vm, int selfRef, LuaRef surface_type, string asset_path, double volume, double pitch)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetImpactSound");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, surface_type);
        pc++;
        vm.PushString(asset_path);
        pc++;
        vm.PushNumber(volume);
        pc++;
        vm.PushNumber(pitch);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetSoundUse(ILuaVM vm, int selfRef, string asset_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetSoundUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushString(asset_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetBaseDamage(ILuaVM vm, int selfRef, double? damage = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetBaseDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (damage != null)
        {
             pc++;
             vm.PushNumber(damage.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetDamageSettings(ILuaVM vm, int selfRef, double damage_start_time, double damage_duration_time)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetDamageSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(damage_start_time);
        pc++;
        vm.PushNumber(damage_duration_time);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCooldown(ILuaVM vm, int selfRef, double cooldown)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCooldown");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(cooldown);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetAnimationsCharacterUse(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAnimationsCharacterUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string GetSoundUse(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetSoundUse");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetBaseDamage(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetBaseDamage");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double GetCooldown(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Melee");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetCooldown");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

