// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class Cable : Paintable
{
    public static void AttachStartTo(ILuaVM vm, int selfRef, int other, int? relative_location = null, string? bone_name = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AttachStartTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, other);
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void AttachEndTo(ILuaVM vm, int selfRef, int other, int? relative_location = null, string? bone_name = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "AttachEndTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, other);
        if (relative_location != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, relative_location.Value);
        }
        if (bone_name != null)
        {
             pc++;
             vm.PushString(bone_name);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void DetachEnd(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "DetachEnd");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void DetachStart(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "DetachStart");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetCableSettings(ILuaVM vm, int selfRef, double length, double num_segments, double solver_iterations)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetCableSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(length);
        pc++;
        vm.PushNumber(num_segments);
        pc++;
        vm.PushNumber(solver_iterations);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetForces(ILuaVM vm, int selfRef, int force, double? gravity_scale = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetForces");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, force);
        if (gravity_scale != null)
        {
             pc++;
             vm.PushNumber(gravity_scale.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetAngularLimits(ILuaVM vm, int selfRef, int swing_1_motion, int swing_2_motion, int twist_motion, double? swing_1_limit = null, double? swing_2_limit = null, double? twist_limit = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetAngularLimits");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, swing_1_motion);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, swing_2_motion);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, twist_motion);
        if (swing_1_limit != null)
        {
             pc++;
             vm.PushNumber(swing_1_limit.Value);
        }
        if (swing_2_limit != null)
        {
             pc++;
             vm.PushNumber(swing_2_limit.Value);
        }
        if (twist_limit != null)
        {
             pc++;
             vm.PushNumber(twist_limit.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetLinearLimits(ILuaVM vm, int selfRef, int x_motion, int y_motion, int z_motion, double? limit = null, double? restitution = null, bool? use_soft_constraint = null, double? stiffness = null, double? damping = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetLinearLimits");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, x_motion);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, y_motion);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, z_motion);
        if (limit != null)
        {
             pc++;
             vm.PushNumber(limit.Value);
        }
        if (restitution != null)
        {
             pc++;
             vm.PushNumber(restitution.Value);
        }
        if (use_soft_constraint != null)
        {
             pc++;
             vm.PushBoolean(use_soft_constraint.Value);
        }
        if (stiffness != null)
        {
             pc++;
             vm.PushNumber(stiffness.Value);
        }
        if (damping != null)
        {
             pc++;
             vm.PushNumber(damping.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetRenderingSettings(ILuaVM vm, int selfRef, double width, double num_sides, double tile_material)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetRenderingSettings");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        pc++;
        vm.PushNumber(width);
        pc++;
        vm.PushNumber(num_sides);
        pc++;
        vm.PushNumber(tile_material);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static int GetAttachedStartTo(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAttachedStartTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int GetAttachedEndTo(ILuaVM vm, int selfRef)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Cable");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetAttachedEndTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

