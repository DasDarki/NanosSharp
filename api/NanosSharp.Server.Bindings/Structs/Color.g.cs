// Autogenerated by the NanosSharp Server Bindings Generator (c) 2025 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public class BColor
{
    public static string ToHex(ILuaVM vm, LuaRef selfRef, bool? appends_transparency = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "ToHex");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, selfRef);
        if (appends_transparency != null)
        {
             pc++;
             vm.PushBoolean(appends_transparency.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef RandomPalette(ILuaVM vm, bool? includes_black = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "RandomPalette");
        if (includes_black != null)
        {
             pc++;
             vm.PushBoolean(includes_black.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef Random(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "Random");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef FromRGBA(ILuaVM vm, double? r = null, double? g = null, double? b = null, double? a = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "FromRGBA");
        if (r != null)
        {
             pc++;
             vm.PushNumber(r.Value);
        }
        if (g != null)
        {
             pc++;
             vm.PushNumber(g.Value);
        }
        if (b != null)
        {
             pc++;
             vm.PushNumber(b.Value);
        }
        if (a != null)
        {
             pc++;
             vm.PushNumber(a.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef FromCYMK(ILuaVM vm, double? c = null, double? y = null, double? m = null, double? k = null, double? a = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "FromCYMK");
        if (c != null)
        {
             pc++;
             vm.PushNumber(c.Value);
        }
        if (y != null)
        {
             pc++;
             vm.PushNumber(y.Value);
        }
        if (m != null)
        {
             pc++;
             vm.PushNumber(m.Value);
        }
        if (k != null)
        {
             pc++;
             vm.PushNumber(k.Value);
        }
        if (a != null)
        {
             pc++;
             vm.PushNumber(a.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef FromHSL(ILuaVM vm, double? h = null, double? s = null, double? l = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "FromHSL");
        if (h != null)
        {
             pc++;
             vm.PushNumber(h.Value);
        }
        if (s != null)
        {
             pc++;
             vm.PushNumber(s.Value);
        }
        if (l != null)
        {
             pc++;
             vm.PushNumber(l.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef FromHSV(ILuaVM vm, double? h = null, double? s = null, double? v = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "FromHSV");
        if (h != null)
        {
             pc++;
             vm.PushNumber(h.Value);
        }
        if (s != null)
        {
             pc++;
             vm.PushNumber(s.Value);
        }
        if (v != null)
        {
             pc++;
             vm.PushNumber(v.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef FromHEX(ILuaVM vm, string hex)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Color");
        vm.GetField(-1, "FromHEX");
        pc++;
        vm.PushString(hex);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

