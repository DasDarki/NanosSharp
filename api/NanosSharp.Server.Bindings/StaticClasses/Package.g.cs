// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class Package
{
    public static void Export(ILuaVM vm, string variable_name, object value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "Export");
        pc++;
        vm.PushString(variable_name);
        pc++;
        vm.PushObject(value);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static object Require(ILuaVM vm, string script_file, bool? force_load = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "Require");
        pc++;
        vm.PushString(script_file);
        if (force_load != null)
        {
             pc++;
             vm.PushBoolean(force_load.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToObject(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static ILuaVM.CFunction Subscribe(ILuaVM vm, string event_name, ILuaVM.CFunction callback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "Subscribe");
        pc++;
        vm.PushString(event_name);
        pc++;
        vm.PushManagedFunction(callback);
        vm.MCall(pc, 1);
        var r0 = vm.ToCFunction(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void Unsubscribe(ILuaVM vm, string event_name, ILuaVM.CFunction? callback = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "Unsubscribe");
        pc++;
        vm.PushString(event_name);
        if (callback != null)
        {
             pc++;
             vm.PushManagedFunction(callback);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPersistentData(ILuaVM vm, string key, object value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "SetPersistentData");
        pc++;
        vm.PushString(key);
        pc++;
        vm.PushObject(value);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetDirectories(ILuaVM vm, string? path_filter = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetDirectories");
        if (path_filter != null)
        {
             pc++;
             vm.PushString(path_filter);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string[] GetFiles(ILuaVM vm, string? path_filter = null, string? extension_filter = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetFiles");
        if (path_filter != null)
        {
             pc++;
             vm.PushString(path_filter);
        }
        if (extension_filter != null)
        {
             pc++;
             vm.PushString(extension_filter);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string GetName(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetName");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetTitle(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetTitle");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetVersion(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetVersion");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetCompatibilityVersion(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetCompatibilityVersion");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object> GetPersistentData(ILuaVM vm, string? key = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "GetPersistentData");
        if (key != null)
        {
             pc++;
             vm.PushString(key);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToTable(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void FlushPersistentData(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "FlushPersistentData");
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

