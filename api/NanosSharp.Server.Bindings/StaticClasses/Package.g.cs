// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class Package
{
    public static void Log(ILuaVM vm, string message, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Log");
        pc++;
        vm.PushString(message);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, args);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Warn(ILuaVM vm, string message, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Warn");
        pc++;
        vm.PushString(message);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, args);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Error(ILuaVM vm, string message, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Error");
        pc++;
        vm.PushString(message);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, args);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static object Call(ILuaVM vm, string package_name, string function_name, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Call");
        pc++;
        vm.PushString(package_name);
        pc++;
        vm.PushString(function_name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, args);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void Export(ILuaVM vm, string function_name, int callback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Export");
        pc++;
        vm.PushString(function_name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, callback);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static object Require(ILuaVM vm, string script_file)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Require");
        pc++;
        vm.PushString(script_file);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void RequirePackage(ILuaVM vm, string package_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RequirePackage");
        pc++;
        vm.PushString(package_name);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static int Subscribe(ILuaVM vm, string event_name, int callback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Subscribe");
        pc++;
        vm.PushString(event_name);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, callback);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void Unsubscribe(ILuaVM vm, string event_name, int? callback = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Unsubscribe");
        pc++;
        vm.PushString(event_name);
        if (callback != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, callback.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPersistentData(ILuaVM vm, string key, object value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "SetPersistentData");
        pc++;
        vm.PushString(key);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, value);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string[] GetDirectories(ILuaVM vm, string? path_filter = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetDirectories");
        if (path_filter != null)
        {
             pc++;
             vm.PushString(path_filter);
        }
        vm.MCall(pc, 1);
        vm.ClearStack();
        return r0;
    }

    public static string[] GetFiles(ILuaVM vm, int? path_filter = null, string? extension_filter = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetFiles");
        if (path_filter != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, path_filter.Value);
        }
        if (extension_filter != null)
        {
             pc++;
             vm.PushString(extension_filter);
        }
        vm.MCall(pc, 1);
        vm.ClearStack();
        return r0;
    }

    public static string GetName(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetName");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetPath(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPath");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetVersion(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetVersion");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object> GetPersistentData(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Package");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "GetPersistentData");
        vm.MCall(pc, 1);
        vm.ClearStack();
        return r0;
    }

}

