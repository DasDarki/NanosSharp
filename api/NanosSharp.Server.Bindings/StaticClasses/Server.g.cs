// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class Server
{
    public static void ChangeMap(ILuaVM vm, string map_path)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "ChangeMap");
        pc++;
        vm.PushString(map_path);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool LoadPackage(ILuaVM vm, string package_folder_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "LoadPackage");
        pc++;
        vm.PushString(package_folder_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool ReloadPackage(ILuaVM vm, string package_folder_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "ReloadPackage");
        pc++;
        vm.PushString(package_folder_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool UnloadPackage(ILuaVM vm, string package_folder_name)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "UnloadPackage");
        pc++;
        vm.PushString(package_folder_name);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void SetDescription(ILuaVM vm, string description, bool? persist_to_config_file = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetDescription");
        pc++;
        vm.PushString(description);
        if (persist_to_config_file != null)
        {
             pc++;
             vm.PushBoolean(persist_to_config_file.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetLogo(ILuaVM vm, string logo_url, bool? persist_to_config_file = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetLogo");
        pc++;
        vm.PushString(logo_url);
        if (persist_to_config_file != null)
        {
             pc++;
             vm.PushBoolean(persist_to_config_file.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetMaxPlayers(ILuaVM vm, LuaRef max_players, bool? persist_to_config_file = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetMaxPlayers");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, max_players);
        if (persist_to_config_file != null)
        {
             pc++;
             vm.PushBoolean(persist_to_config_file.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetName(ILuaVM vm, string name, bool? persist_to_config_file = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetName");
        pc++;
        vm.PushString(name);
        if (persist_to_config_file != null)
        {
             pc++;
             vm.PushBoolean(persist_to_config_file.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetPassword(ILuaVM vm, string password, bool? persist_to_config_file = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetPassword");
        pc++;
        vm.PushString(password);
        if (persist_to_config_file != null)
        {
             pc++;
             vm.PushBoolean(persist_to_config_file.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetValue(ILuaVM vm, string key, object value, bool? sync_on_client = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "SetValue");
        pc++;
        vm.PushString(key);
        pc++;
        vm.PushObject(value);
        if (sync_on_client != null)
        {
             pc++;
             vm.PushBoolean(sync_on_client.Value);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static object GetValue(ILuaVM vm, string key, object fallback)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetValue");
        pc++;
        vm.PushString(key);
        pc++;
        vm.PushObject(fallback);
        vm.MCall(pc, 1);
        var r0 = vm.ToObject(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string[] GetAllValuesKeys(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetAllValuesKeys");
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<string>(-1);
        vm.ClearStack();
        return r0;
    }

    public static void Unban(ILuaVM vm, string account_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "Unban");
        pc++;
        vm.PushString(account_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Stop(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "Stop");
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Restart(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "Restart");
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static ILuaVM.CFunction Subscribe(ILuaVM vm, string event_name, ILuaVM.CFunction function)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "Subscribe");
        pc++;
        vm.PushString(event_name);
        pc++;
        vm.PushManagedFunction(function);
        vm.MCall(pc, 1);
        var r0 = vm.ToCFunction(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void Unsubscribe(ILuaVM vm, string event_name, ILuaVM.CFunction? function = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "Unsubscribe");
        pc++;
        vm.PushString(event_name);
        if (function != null)
        {
             pc++;
             vm.PushManagedFunction(function);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string GetMap(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetMap");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetMapAsset(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetMapAsset");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object> GetMapConfig(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetMapConfig");
        vm.MCall(pc, 1);
        var r0 = vm.ToTable(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object>[] GetMapSpawnPoints(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetMapSpawnPoints");
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<Dictionary<string, object>>(-1);
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object>[] GetPackages(ILuaVM vm, bool? only_loaded = null, PackageType? package_type_filter = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetPackages");
        if (only_loaded != null)
        {
             pc++;
             vm.PushBoolean(only_loaded.Value);
        }
        if (package_type_filter != null)
        {
             pc++;
             vm.PushEnum(package_type_filter.Value);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<Dictionary<string, object>>(-1);
        vm.ClearStack();
        return r0;
    }

    public static string GetVersion(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetVersion");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string GetIP(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetIP");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetPort(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetPort");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetQueryPort(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetQueryPort");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetCompressionLevel(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetCompressionLevel");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetMaxPlayers(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetMaxPlayers");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static string GetDescription(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetDescription");
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static Dictionary<string, object>[] GetCustomSettings(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetCustomSettings");
        vm.MCall(pc, 1);
        var r0 = vm.ToArray<Dictionary<string, object>>(-1);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetTickRate(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetTickRate");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetTime(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "GetTime");
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static bool IsAnnounced(ILuaVM vm)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Server");
        vm.GetField(-1, "IsAnnounced");
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

