// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class HTTP
{
    public static void RequestAsync(ILuaVM vm, string uri, string? endpoint = null, HTTPMethod? method = null, string? data = null, string? content_type = null, bool? compress = null, Dictionary<string, object>? headers = null, ILuaVM.CFunction? callback = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "HTTP");
        vm.GetField(-1, "RequestAsync");
        pc++;
        vm.PushString(uri);
        if (endpoint != null)
        {
             pc++;
             vm.PushString(endpoint);
        }
        if (method != null)
        {
             pc++;
             vm.PushEnum(method.Value);
        }
        if (data != null)
        {
             pc++;
             vm.PushString(data);
        }
        if (content_type != null)
        {
             pc++;
             vm.PushString(content_type);
        }
        if (compress != null)
        {
             pc++;
             vm.PushBoolean(compress.Value);
        }
        if (headers != null)
        {
             pc++;
             vm.PushTable(headers);
        }
        if (callback != null)
        {
             pc++;
             vm.PushManagedFunction(callback);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public struct Request_Return0
    {
        public LuaRef Status;
        public string Data;
        public static implicit operator Request_Return0(Dictionary<string, object> d)
        {
            return new Request_Return0
            {
                Status = (LuaRef)d["Status"],
                Data = (string)d["Data"],
            };
        }
    }

    public static Request_Return0 Request(ILuaVM vm, string uri, string? endpoint = null, HTTPMethod? method = null, string? data = null, string? content_type = null, bool? compress = null, Dictionary<string, object>? headers = null)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "HTTP");
        vm.GetField(-1, "Request");
        pc++;
        vm.PushString(uri);
        if (endpoint != null)
        {
             pc++;
             vm.PushString(endpoint);
        }
        if (method != null)
        {
             pc++;
             vm.PushEnum(method.Value);
        }
        if (data != null)
        {
             pc++;
             vm.PushString(data);
        }
        if (content_type != null)
        {
             pc++;
             vm.PushString(content_type);
        }
        if (compress != null)
        {
             pc++;
             vm.PushBoolean(compress.Value);
        }
        if (headers != null)
        {
             pc++;
             vm.PushTable(headers);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToTable(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void SetConnectionTimeout(ILuaVM vm, LuaRef connection_timeout)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "HTTP");
        vm.GetField(-1, "SetConnectionTimeout");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, connection_timeout);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void SetReadWriteTimeout(ILuaVM vm, LuaRef read_write_timeout)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "HTTP");
        vm.GetField(-1, "SetReadWriteTimeout");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, read_write_timeout);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

