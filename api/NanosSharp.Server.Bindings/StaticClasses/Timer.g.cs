// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class Timer
{
    public static LuaRef SetTimeout(ILuaVM vm, ILuaVM.CFunction callback, LuaRef? milliseconds = null, params object[] parameters)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "SetTimeout");
        pc++;
        vm.PushManagedFunction(callback);
        if (milliseconds != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, milliseconds.Value);
        }
        pc++;
        foreach (var a in parameters) {
            vm.PushObject(a);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef SetInterval(ILuaVM vm, ILuaVM.CFunction callback, LuaRef? milliseconds = null, params object[] parameters)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "SetInterval");
        pc++;
        vm.PushManagedFunction(callback);
        if (milliseconds != null)
        {
             pc++;
             vm.RawGetI(ILuaVM.RegistryIndex, milliseconds.Value);
        }
        pc++;
        foreach (var a in parameters) {
            vm.PushObject(a);
        }
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void ClearTimeout(ILuaVM vm, LuaRef timeout_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "ClearTimeout");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timeout_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ClearInterval(ILuaVM vm, LuaRef interval_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "ClearInterval");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, interval_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Bind(ILuaVM vm, LuaRef timer_id, LuaRef actor)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "Bind");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, actor);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static bool IsValid(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "IsValid");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetElapsedTime(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "GetElapsedTime");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static LuaRef GetRemainingTime(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "GetRemainingTime");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static void Pause(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "Pause");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void Resume(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "Resume");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static void ResetElapsedTime(ILuaVM vm, LuaRef timer_id)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "Timer");
        vm.GetField(-1, "ResetElapsedTime");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, timer_id);
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

}

