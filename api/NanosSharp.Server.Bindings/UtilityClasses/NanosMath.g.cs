// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class NanosMath
{
    public static double Round(ILuaVM vm, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Round");
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double Clamp(ILuaVM vm, double value, double min, double max)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "Clamp");
        pc++;
        vm.PushNumber(value);
        pc++;
        vm.PushNumber(min);
        pc++;
        vm.PushNumber(max);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double ClampAxis(ILuaVM vm, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "ClampAxis");
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static double NormalizeAxis(ILuaVM vm, double value)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "NormalizeAxis");
        pc++;
        vm.PushNumber(value);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void RelativeTo(ILuaVM vm, int location, int rotation, int actor, out int r0, out int r1)
    {
        r0 = default;
        r1 = default;
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RelativeTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, location);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, rotation);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, actor);
        vm.MCall(pc, 2);
        r1 = vm.Ref(ILuaVM.RegistryIndex);
        r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
    }

    public static double FInterpTo(ILuaVM vm, double current, double target, double delta_time, double interp_speed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "FInterpTo");
        pc++;
        vm.PushNumber(current);
        pc++;
        vm.PushNumber(target);
        pc++;
        vm.PushNumber(delta_time);
        pc++;
        vm.PushNumber(interp_speed);
        vm.MCall(pc, 1);
        var r0 = vm.ToNumber(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static int RInterpTo(ILuaVM vm, int current, int target, double delta_time, double interp_speed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RInterpTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, current);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, target);
        pc++;
        vm.PushNumber(delta_time);
        pc++;
        vm.PushNumber(interp_speed);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int RInterpConstantTo(ILuaVM vm, int current, int target, double delta_time, double interp_speed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "RInterpConstantTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, current);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, target);
        pc++;
        vm.PushNumber(delta_time);
        pc++;
        vm.PushNumber(interp_speed);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int VInterpTo(ILuaVM vm, int current, int target, double delta_time, double interp_speed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "VInterpTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, current);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, target);
        pc++;
        vm.PushNumber(delta_time);
        pc++;
        vm.PushNumber(interp_speed);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

    public static int VInterpConstantTo(ILuaVM vm, int current, int target, double delta_time, double interp_speed)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosMath");
        vm.GetField(-1, "__function");
        vm.GetField(-1, "VInterpConstantTo");
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, current);
        pc++;
        vm.RawGetI(ILuaVM.RegistryIndex, target);
        pc++;
        vm.PushNumber(delta_time);
        pc++;
        vm.PushNumber(interp_speed);
        vm.MCall(pc, 1);
        var r0 = vm.Ref(ILuaVM.RegistryIndex);
        vm.ClearStack();
        return r0;
    }

}

