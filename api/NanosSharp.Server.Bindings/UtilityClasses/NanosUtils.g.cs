// Autogenerated by the NanosSharp Server Bindings Generator (c) 2022 DasDarki / GPLv3

using NanosSharp.API;

namespace NanosSharp.Server.Bindings;

public static class NanosUtils
{
    public static bool IsA(ILuaVM vm, object obj, object type)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosUtils");
        vm.GetField(-1, "IsA");
        pc++;
        vm.PushObject(obj);
        pc++;
        vm.PushObject(type);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static bool IsEntityValid(ILuaVM vm, object entity)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosUtils");
        vm.GetField(-1, "IsEntityValid");
        pc++;
        vm.PushObject(entity);
        vm.MCall(pc, 1);
        var r0 = vm.ToBoolean(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static string Dump(ILuaVM vm, Dictionary<string, object> table)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosUtils");
        vm.GetField(-1, "Dump");
        pc++;
        vm.PushTable(table);
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

    public static void Benchmark(ILuaVM vm, string name, double amount, ILuaVM.CFunction func, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosUtils");
        vm.GetField(-1, "Benchmark");
        pc++;
        vm.PushString(name);
        pc++;
        vm.PushNumber(amount);
        pc++;
        vm.PushManagedFunction(func);
        pc++;
        foreach (var a in args) {
            vm.PushObject(a);
        }
        vm.MCall(pc, 0);
        vm.ClearStack();
    }

    public static string FormatString(ILuaVM vm, string text, params object[] args)
    {
        int pc = 0;
        vm.PushGlobalTable();
        vm.GetField(-1, "NanosUtils");
        vm.GetField(-1, "FormatString");
        pc++;
        vm.PushString(text);
        pc++;
        foreach (var a in args) {
            vm.PushObject(a);
        }
        vm.MCall(pc, 1);
        var r0 = vm.ToString(-1);
        vm.Pop();
        vm.ClearStack();
        return r0;
    }

}

